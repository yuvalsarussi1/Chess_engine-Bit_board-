import bitboard as b
EN_PASSANT_SQ = -1
def en_passant_conditions_white(from_sq, to_sq):
    global EN_PASSANT_SQ
    if b.SQUARE_MAP[from_sq] != b.WP: return False
    if to_sq - from_sq != 16: return False

    left  = from_sq - 1 if from_sq % 8 != 0 else None
    right = from_sq + 1 if from_sq % 8 != 7 else None
    mask = 0
    if left is not None:  mask |= 1 << left
    if right is not None: mask |= 1 << right

    if b.PIECE_DICT[b.BP] & mask:
        EN_PASSANT_SQ = from_sq + 8
        return True
    EN_PASSANT_SQ = -1
    return False

def en_passant_conditions_black(from_sq, to_sq):
    global EN_PASSANT_SQ
    if b.SQUARE_MAP[from_sq] != b.BP: return False
    if from_sq - to_sq != 16: return False

    left  = from_sq - 1 if from_sq % 8 != 0 else None
    right = from_sq + 1 if from_sq % 8 != 7 else None
    mask = 0
    if left is not None:  mask |= 1 << left
    if right is not None: mask |= 1 << right

    if b.PIECE_DICT[b.WP] & mask:
        EN_PASSANT_SQ = from_sq - 8
        return True
    EN_PASSANT_SQ = -1
    return False



def en_passant_execute(from_sq, to_sq, moved_piece):
    global EN_PASSANT_SQ
    if to_sq != EN_PASSANT_SQ: 
        return False

    if moved_piece == b.WP:
        captured_sq = to_sq - 8
        captured_piece = b.SQUARE_MAP[captured_sq]
        if captured_piece == b.BP:
            b.PIECE_DICT[b.BP] &= ~(1 << captured_sq)
            b.SQUARE_MAP[captured_sq] = b.E
            b.BLACK_OCCUPANCY &= ~(1 << captured_sq)
            b.ALL_OCCUPANCY   &= ~(1 << captured_sq)
            return True

    elif moved_piece == b.BP:
        captured_sq = to_sq + 8
        captured_piece = b.SQUARE_MAP[captured_sq]
        if captured_piece == b.WP:
            b.PIECE_DICT[b.WP] &= ~(1 << captured_sq)
            b.SQUARE_MAP[captured_sq] = b.E
            b.WHITE_OCCUPANCY &= ~(1 << captured_sq)
            b.ALL_OCCUPANCY   &= ~(1 << captured_sq)
            return True

    return False


